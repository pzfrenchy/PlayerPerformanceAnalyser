#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AnalyserLibrary
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertTimeLine(TimeLine instance);
    partial void UpdateTimeLine(TimeLine instance);
    partial void DeleteTimeLine(TimeLine instance);
    partial void InsertGameType(GameType instance);
    partial void UpdateGameType(GameType instance);
    partial void DeleteGameType(GameType instance);
    partial void InsertGPSDevice(GPSDevice instance);
    partial void UpdateGPSDevice(GPSDevice instance);
    partial void DeleteGPSDevice(GPSDevice instance);
    partial void InsertLineup(Lineup instance);
    partial void UpdateLineup(Lineup instance);
    partial void DeleteLineup(Lineup instance);
    partial void InsertOpponent(Opponent instance);
    partial void UpdateOpponent(Opponent instance);
    partial void DeleteOpponent(Opponent instance);
    partial void InsertPitch(Pitch instance);
    partial void UpdatePitch(Pitch instance);
    partial void DeletePitch(Pitch instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertOption(Option instance);
    partial void UpdateOption(Option instance);
    partial void DeleteOption(Option instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::AnalyserLibrary.Properties.Settings.Default.DatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<TimeLine> TimeLines
		{
			get
			{
				return this.GetTable<TimeLine>();
			}
		}
		
		public System.Data.Linq.Table<GameType> GameTypes
		{
			get
			{
				return this.GetTable<GameType>();
			}
		}
		
		public System.Data.Linq.Table<GPSDevice> GPSDevices
		{
			get
			{
				return this.GetTable<GPSDevice>();
			}
		}
		
		public System.Data.Linq.Table<Lineup> Lineups
		{
			get
			{
				return this.GetTable<Lineup>();
			}
		}
		
		public System.Data.Linq.Table<Opponent> Opponents
		{
			get
			{
				return this.GetTable<Opponent>();
			}
		}
		
		public System.Data.Linq.Table<Pitch> Pitches
		{
			get
			{
				return this.GetTable<Pitch>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<Option> Options
		{
			get
			{
				return this.GetTable<Option>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PlayerFullNameProc")]
		public ISingleResult<PlayerFullNameProcResult> PlayerFullNameProc()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<PlayerFullNameProcResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PlayerLineupDetailsProc")]
		public ISingleResult<PlayerLineupDetailsProcResult> PlayerLineupDetailsProc([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GameID", DbType="Int")] System.Nullable<int> gameID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), gameID);
			return ((ISingleResult<PlayerLineupDetailsProcResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GameSearchByDateProc")]
		public ISingleResult<GameSearchByDateProcResult> GameSearchByDateProc([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date", DbType="Int")] System.Nullable<int> date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date);
			return ((ISingleResult<GameSearchByDateProcResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SelectOpponentsBarTraining")]
		public ISingleResult<SelectOpponentsBarTrainingResult> SelectOpponentsBarTraining()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SelectOpponentsBarTrainingResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GameDetailsProc")]
		public ISingleResult<GameDetailsProcResult> GameDetailsProc()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GameDetailsProcResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GameSearchByOpponentProc")]
		public ISingleResult<GameSearchByOpponentProcResult> GameSearchByOpponentProc([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Opponent", DbType="VarChar(1)")] string opponent)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), opponent);
			return ((ISingleResult<GameSearchByOpponentProcResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GameDetailsByOppProc")]
		public ISingleResult<GameDetailsByOppProcResult> GameDetailsByOppProc([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1)")] string opponent)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), opponent);
			return ((ISingleResult<GameDetailsByOppProcResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameID;
		
		private System.DateTime _GameDate;
		
		private int _OpponentID;
		
		private int _PitchID;
		
		private int _GameTypeID;
		
		private EntitySet<Lineup> _Lineups;
		
		private EntityRef<GameType> _GameType;
		
		private EntityRef<Opponent> _Opponent;
		
		private EntityRef<Pitch> _Pitch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnGameDateChanging(System.DateTime value);
    partial void OnGameDateChanged();
    partial void OnOpponentIDChanging(int value);
    partial void OnOpponentIDChanged();
    partial void OnPitchIDChanging(int value);
    partial void OnPitchIDChanged();
    partial void OnGameTypeIDChanging(int value);
    partial void OnGameTypeIDChanged();
    #endregion
		
		public Game()
		{
			this._Lineups = new EntitySet<Lineup>(new Action<Lineup>(this.attach_Lineups), new Action<Lineup>(this.detach_Lineups));
			this._GameType = default(EntityRef<GameType>);
			this._Opponent = default(EntityRef<Opponent>);
			this._Pitch = default(EntityRef<Pitch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameDate", DbType="Date NOT NULL")]
		public System.DateTime GameDate
		{
			get
			{
				return this._GameDate;
			}
			set
			{
				if ((this._GameDate != value))
				{
					this.OnGameDateChanging(value);
					this.SendPropertyChanging();
					this._GameDate = value;
					this.SendPropertyChanged("GameDate");
					this.OnGameDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentID", DbType="Int NOT NULL")]
		public int OpponentID
		{
			get
			{
				return this._OpponentID;
			}
			set
			{
				if ((this._OpponentID != value))
				{
					if (this._Opponent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOpponentIDChanging(value);
					this.SendPropertyChanging();
					this._OpponentID = value;
					this.SendPropertyChanged("OpponentID");
					this.OnOpponentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PitchID", DbType="Int NOT NULL")]
		public int PitchID
		{
			get
			{
				return this._PitchID;
			}
			set
			{
				if ((this._PitchID != value))
				{
					if (this._Pitch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPitchIDChanging(value);
					this.SendPropertyChanging();
					this._PitchID = value;
					this.SendPropertyChanged("PitchID");
					this.OnPitchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameTypeID", DbType="Int NOT NULL")]
		public int GameTypeID
		{
			get
			{
				return this._GameTypeID;
			}
			set
			{
				if ((this._GameTypeID != value))
				{
					if (this._GameType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameTypeIDChanging(value);
					this.SendPropertyChanging();
					this._GameTypeID = value;
					this.SendPropertyChanged("GameTypeID");
					this.OnGameTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Lineup", Storage="_Lineups", ThisKey="GameID", OtherKey="GameID")]
		public EntitySet<Lineup> Lineups
		{
			get
			{
				return this._Lineups;
			}
			set
			{
				this._Lineups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameType_Game", Storage="_GameType", ThisKey="GameTypeID", OtherKey="GameTypeID", IsForeignKey=true)]
		public GameType GameType
		{
			get
			{
				return this._GameType.Entity;
			}
			set
			{
				GameType previousValue = this._GameType.Entity;
				if (((previousValue != value) 
							|| (this._GameType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameType.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._GameType.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._GameTypeID = value.GameTypeID;
					}
					else
					{
						this._GameTypeID = default(int);
					}
					this.SendPropertyChanged("GameType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Opponent_Game", Storage="_Opponent", ThisKey="OpponentID", OtherKey="OpponentID", IsForeignKey=true)]
		public Opponent Opponent
		{
			get
			{
				return this._Opponent.Entity;
			}
			set
			{
				Opponent previousValue = this._Opponent.Entity;
				if (((previousValue != value) 
							|| (this._Opponent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Opponent.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Opponent.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._OpponentID = value.OpponentID;
					}
					else
					{
						this._OpponentID = default(int);
					}
					this.SendPropertyChanged("Opponent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pitch_Game", Storage="_Pitch", ThisKey="PitchID", OtherKey="PitchID", IsForeignKey=true)]
		public Pitch Pitch
		{
			get
			{
				return this._Pitch.Entity;
			}
			set
			{
				Pitch previousValue = this._Pitch.Entity;
				if (((previousValue != value) 
							|| (this._Pitch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pitch.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Pitch.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._PitchID = value.PitchID;
					}
					else
					{
						this._PitchID = default(int);
					}
					this.SendPropertyChanged("Pitch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lineups(Lineup entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Lineups(Lineup entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeLine")]
	public partial class TimeLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimeLineID;
		
		private System.DateTime _ReadingTime;
		
		private double _Longitude;
		
		private double _Latitude;
		
		private int _GPSDeviceID;
		
		private int _LineupID;
		
		private EntityRef<GPSDevice> _GPSDevice;
		
		private EntityRef<Lineup> _Lineup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeLineIDChanging(int value);
    partial void OnTimeLineIDChanged();
    partial void OnReadingTimeChanging(System.DateTime value);
    partial void OnReadingTimeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnGPSDeviceIDChanging(int value);
    partial void OnGPSDeviceIDChanged();
    partial void OnLineupIDChanging(int value);
    partial void OnLineupIDChanged();
    #endregion
		
		public TimeLine()
		{
			this._GPSDevice = default(EntityRef<GPSDevice>);
			this._Lineup = default(EntityRef<Lineup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeLineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TimeLineID
		{
			get
			{
				return this._TimeLineID;
			}
			set
			{
				if ((this._TimeLineID != value))
				{
					this.OnTimeLineIDChanging(value);
					this.SendPropertyChanging();
					this._TimeLineID = value;
					this.SendPropertyChanged("TimeLineID");
					this.OnTimeLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadingTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime ReadingTime
		{
			get
			{
				return this._ReadingTime;
			}
			set
			{
				if ((this._ReadingTime != value))
				{
					this.OnReadingTimeChanging(value);
					this.SendPropertyChanging();
					this._ReadingTime = value;
					this.SendPropertyChanged("ReadingTime");
					this.OnReadingTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPSDeviceID", DbType="Int NOT NULL")]
		public int GPSDeviceID
		{
			get
			{
				return this._GPSDeviceID;
			}
			set
			{
				if ((this._GPSDeviceID != value))
				{
					if (this._GPSDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGPSDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._GPSDeviceID = value;
					this.SendPropertyChanged("GPSDeviceID");
					this.OnGPSDeviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineupID", DbType="Int NOT NULL")]
		public int LineupID
		{
			get
			{
				return this._LineupID;
			}
			set
			{
				if ((this._LineupID != value))
				{
					if (this._Lineup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLineupIDChanging(value);
					this.SendPropertyChanging();
					this._LineupID = value;
					this.SendPropertyChanged("LineupID");
					this.OnLineupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GPSDevice_TimeLine", Storage="_GPSDevice", ThisKey="GPSDeviceID", OtherKey="GPSDeviceID", IsForeignKey=true)]
		public GPSDevice GPSDevice
		{
			get
			{
				return this._GPSDevice.Entity;
			}
			set
			{
				GPSDevice previousValue = this._GPSDevice.Entity;
				if (((previousValue != value) 
							|| (this._GPSDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GPSDevice.Entity = null;
						previousValue.TimeLines.Remove(this);
					}
					this._GPSDevice.Entity = value;
					if ((value != null))
					{
						value.TimeLines.Add(this);
						this._GPSDeviceID = value.GPSDeviceID;
					}
					else
					{
						this._GPSDeviceID = default(int);
					}
					this.SendPropertyChanged("GPSDevice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lineup_TimeLine", Storage="_Lineup", ThisKey="LineupID", OtherKey="LineupID", IsForeignKey=true)]
		public Lineup Lineup
		{
			get
			{
				return this._Lineup.Entity;
			}
			set
			{
				Lineup previousValue = this._Lineup.Entity;
				if (((previousValue != value) 
							|| (this._Lineup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lineup.Entity = null;
						previousValue.TimeLines.Remove(this);
					}
					this._Lineup.Entity = value;
					if ((value != null))
					{
						value.TimeLines.Add(this);
						this._LineupID = value.LineupID;
					}
					else
					{
						this._LineupID = default(int);
					}
					this.SendPropertyChanged("Lineup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameType")]
	public partial class GameType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameTypeID;
		
		private string _Type;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameTypeIDChanging(int value);
    partial void OnGameTypeIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public GameType()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GameTypeID
		{
			get
			{
				return this._GameTypeID;
			}
			set
			{
				if ((this._GameTypeID != value))
				{
					this.OnGameTypeIDChanging(value);
					this.SendPropertyChanging();
					this._GameTypeID = value;
					this.SendPropertyChanged("GameTypeID");
					this.OnGameTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameType_Game", Storage="_Games", ThisKey="GameTypeID", OtherKey="GameTypeID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.GameType = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.GameType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GPSDevice")]
	public partial class GPSDevice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GPSDeviceID;
		
		private string _GPSDeviceName;
		
		private EntitySet<TimeLine> _TimeLines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGPSDeviceIDChanging(int value);
    partial void OnGPSDeviceIDChanged();
    partial void OnGPSDeviceNameChanging(string value);
    partial void OnGPSDeviceNameChanged();
    #endregion
		
		public GPSDevice()
		{
			this._TimeLines = new EntitySet<TimeLine>(new Action<TimeLine>(this.attach_TimeLines), new Action<TimeLine>(this.detach_TimeLines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPSDeviceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GPSDeviceID
		{
			get
			{
				return this._GPSDeviceID;
			}
			set
			{
				if ((this._GPSDeviceID != value))
				{
					this.OnGPSDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._GPSDeviceID = value;
					this.SendPropertyChanged("GPSDeviceID");
					this.OnGPSDeviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPSDeviceName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string GPSDeviceName
		{
			get
			{
				return this._GPSDeviceName;
			}
			set
			{
				if ((this._GPSDeviceName != value))
				{
					this.OnGPSDeviceNameChanging(value);
					this.SendPropertyChanging();
					this._GPSDeviceName = value;
					this.SendPropertyChanged("GPSDeviceName");
					this.OnGPSDeviceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GPSDevice_TimeLine", Storage="_TimeLines", ThisKey="GPSDeviceID", OtherKey="GPSDeviceID")]
		public EntitySet<TimeLine> TimeLines
		{
			get
			{
				return this._TimeLines;
			}
			set
			{
				this._TimeLines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TimeLines(TimeLine entity)
		{
			this.SendPropertyChanging();
			entity.GPSDevice = this;
		}
		
		private void detach_TimeLines(TimeLine entity)
		{
			this.SendPropertyChanging();
			entity.GPSDevice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lineup")]
	public partial class Lineup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LineupID;
		
		private int _PositionID;
		
		private int _PlayerID;
		
		private int _GameID;
		
		private EntitySet<TimeLine> _TimeLines;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Position> _Position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLineupIDChanging(int value);
    partial void OnLineupIDChanged();
    partial void OnPositionIDChanging(int value);
    partial void OnPositionIDChanged();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    #endregion
		
		public Lineup()
		{
			this._TimeLines = new EntitySet<TimeLine>(new Action<TimeLine>(this.attach_TimeLines), new Action<TimeLine>(this.detach_TimeLines));
			this._Game = default(EntityRef<Game>);
			this._Player = default(EntityRef<Player>);
			this._Position = default(EntityRef<Position>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LineupID
		{
			get
			{
				return this._LineupID;
			}
			set
			{
				if ((this._LineupID != value))
				{
					this.OnLineupIDChanging(value);
					this.SendPropertyChanging();
					this._LineupID = value;
					this.SendPropertyChanged("LineupID");
					this.OnLineupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", DbType="Int NOT NULL")]
		public int PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL")]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lineup_TimeLine", Storage="_TimeLines", ThisKey="LineupID", OtherKey="LineupID")]
		public EntitySet<TimeLine> TimeLines
		{
			get
			{
				return this._TimeLines;
			}
			set
			{
				this._TimeLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Lineup", Storage="_Game", ThisKey="GameID", OtherKey="GameID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Lineups.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Lineups.Add(this);
						this._GameID = value.GameID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Lineup", Storage="_Player", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Lineups.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Lineups.Add(this);
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Lineup", Storage="_Position", ThisKey="PositionID", OtherKey="PositionID", IsForeignKey=true)]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.Lineups.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.Lineups.Add(this);
						this._PositionID = value.PositionID;
					}
					else
					{
						this._PositionID = default(int);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TimeLines(TimeLine entity)
		{
			this.SendPropertyChanging();
			entity.Lineup = this;
		}
		
		private void detach_TimeLines(TimeLine entity)
		{
			this.SendPropertyChanging();
			entity.Lineup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Opponent")]
	public partial class Opponent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OpponentID;
		
		private string _OpponentName;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOpponentIDChanging(int value);
    partial void OnOpponentIDChanged();
    partial void OnOpponentNameChanging(string value);
    partial void OnOpponentNameChanged();
    #endregion
		
		public Opponent()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OpponentID
		{
			get
			{
				return this._OpponentID;
			}
			set
			{
				if ((this._OpponentID != value))
				{
					this.OnOpponentIDChanging(value);
					this.SendPropertyChanging();
					this._OpponentID = value;
					this.SendPropertyChanged("OpponentID");
					this.OnOpponentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OpponentName
		{
			get
			{
				return this._OpponentName;
			}
			set
			{
				if ((this._OpponentName != value))
				{
					this.OnOpponentNameChanging(value);
					this.SendPropertyChanging();
					this._OpponentName = value;
					this.SendPropertyChanged("OpponentName");
					this.OnOpponentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Opponent_Game", Storage="_Games", ThisKey="OpponentID", OtherKey="OpponentID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Opponent = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Opponent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pitch")]
	public partial class Pitch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PitchID;
		
		private string _PitchName;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPitchIDChanging(int value);
    partial void OnPitchIDChanged();
    partial void OnPitchNameChanging(string value);
    partial void OnPitchNameChanged();
    #endregion
		
		public Pitch()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PitchID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PitchID
		{
			get
			{
				return this._PitchID;
			}
			set
			{
				if ((this._PitchID != value))
				{
					this.OnPitchIDChanging(value);
					this.SendPropertyChanging();
					this._PitchID = value;
					this.SendPropertyChanged("PitchID");
					this.OnPitchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PitchName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PitchName
		{
			get
			{
				return this._PitchName;
			}
			set
			{
				if ((this._PitchName != value))
				{
					this.OnPitchNameChanging(value);
					this.SendPropertyChanging();
					this._PitchName = value;
					this.SendPropertyChanged("PitchName");
					this.OnPitchNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pitch_Game", Storage="_Games", ThisKey="PitchID", OtherKey="PitchID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Pitch = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Pitch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private string _Forename;
		
		private string _Surname;
		
		private System.DateTime _Dob;
		
		private bool _Active;
		
		private EntitySet<Lineup> _Lineups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnForenameChanging(string value);
    partial void OnForenameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnDobChanging(System.DateTime value);
    partial void OnDobChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Player()
		{
			this._Lineups = new EntitySet<Lineup>(new Action<Lineup>(this.attach_Lineups), new Action<Lineup>(this.detach_Lineups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Forename", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Forename
		{
			get
			{
				return this._Forename;
			}
			set
			{
				if ((this._Forename != value))
				{
					this.OnForenameChanging(value);
					this.SendPropertyChanging();
					this._Forename = value;
					this.SendPropertyChanged("Forename");
					this.OnForenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dob", DbType="Date NOT NULL")]
		public System.DateTime Dob
		{
			get
			{
				return this._Dob;
			}
			set
			{
				if ((this._Dob != value))
				{
					this.OnDobChanging(value);
					this.SendPropertyChanging();
					this._Dob = value;
					this.SendPropertyChanged("Dob");
					this.OnDobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Lineup", Storage="_Lineups", ThisKey="PlayerID", OtherKey="PlayerID")]
		public EntitySet<Lineup> Lineups
		{
			get
			{
				return this._Lineups;
			}
			set
			{
				this._Lineups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lineups(Lineup entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Lineups(Lineup entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PositionID;
		
		private string _Position1;
		
		private EntitySet<Lineup> _Lineups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPositionIDChanging(int value);
    partial void OnPositionIDChanged();
    partial void OnPosition1Changing(string value);
    partial void OnPosition1Changed();
    #endregion
		
		public Position()
		{
			this._Lineups = new EntitySet<Lineup>(new Action<Lineup>(this.attach_Lineups), new Action<Lineup>(this.detach_Lineups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Position", Storage="_Position1", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Position1
		{
			get
			{
				return this._Position1;
			}
			set
			{
				if ((this._Position1 != value))
				{
					this.OnPosition1Changing(value);
					this.SendPropertyChanging();
					this._Position1 = value;
					this.SendPropertyChanged("Position1");
					this.OnPosition1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Lineup", Storage="_Lineups", ThisKey="PositionID", OtherKey="PositionID")]
		public EntitySet<Lineup> Lineups
		{
			get
			{
				return this._Lineups;
			}
			set
			{
				this._Lineups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lineups(Lineup entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_Lineups(Lineup entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Options")]
	public partial class Option : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UploadDir;
		
		private double _BreakdownInterval;
		
		private double _EffortZone1Min;
		
		private double _EffortZone1Max;
		
		private double _EffortZone2Min;
		
		private double _EffortZone2Max;
		
		private double _EffortZone3Min;
		
		private double _EffortZone3Max;
		
		private double _EffortZone4Min;
		
		private double _EffortZone4Max;
		
		private double _EffortZone5Min;
		
		private double _EffortZone5Max;
		
		private double _EffortZone6Min;
		
		private double _EffortZone6Max;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUploadDirChanging(string value);
    partial void OnUploadDirChanged();
    partial void OnBreakdownIntervalChanging(double value);
    partial void OnBreakdownIntervalChanged();
    partial void OnEffortZone1MinChanging(double value);
    partial void OnEffortZone1MinChanged();
    partial void OnEffortZone1MaxChanging(double value);
    partial void OnEffortZone1MaxChanged();
    partial void OnEffortZone2MinChanging(double value);
    partial void OnEffortZone2MinChanged();
    partial void OnEffortZone2MaxChanging(double value);
    partial void OnEffortZone2MaxChanged();
    partial void OnEffortZone3MinChanging(double value);
    partial void OnEffortZone3MinChanged();
    partial void OnEffortZone3MaxChanging(double value);
    partial void OnEffortZone3MaxChanged();
    partial void OnEffortZone4MinChanging(double value);
    partial void OnEffortZone4MinChanged();
    partial void OnEffortZone4MaxChanging(double value);
    partial void OnEffortZone4MaxChanged();
    partial void OnEffortZone5MinChanging(double value);
    partial void OnEffortZone5MinChanged();
    partial void OnEffortZone5MaxChanging(double value);
    partial void OnEffortZone5MaxChanged();
    partial void OnEffortZone6MinChanging(double value);
    partial void OnEffortZone6MinChanged();
    partial void OnEffortZone6MaxChanging(double value);
    partial void OnEffortZone6MaxChanged();
    #endregion
		
		public Option()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadDir", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string UploadDir
		{
			get
			{
				return this._UploadDir;
			}
			set
			{
				if ((this._UploadDir != value))
				{
					this.OnUploadDirChanging(value);
					this.SendPropertyChanging();
					this._UploadDir = value;
					this.SendPropertyChanged("UploadDir");
					this.OnUploadDirChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BreakdownInterval", DbType="Float NOT NULL")]
		public double BreakdownInterval
		{
			get
			{
				return this._BreakdownInterval;
			}
			set
			{
				if ((this._BreakdownInterval != value))
				{
					this.OnBreakdownIntervalChanging(value);
					this.SendPropertyChanging();
					this._BreakdownInterval = value;
					this.SendPropertyChanged("BreakdownInterval");
					this.OnBreakdownIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffortZone1Min", DbType="Float NOT NULL")]
		public double EffortZone1Min
		{
			get
			{
				return this._EffortZone1Min;
			}
			set
			{
				if ((this._EffortZone1Min != value))
				{
					this.OnEffortZone1MinChanging(value);
					this.SendPropertyChanging();
					this._EffortZone1Min = value;
					this.SendPropertyChanged("EffortZone1Min");
					this.OnEffortZone1MinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffortZone1Max", DbType="Float NOT NULL")]
		public double EffortZone1Max
		{
			get
			{
				return this._EffortZone1Max;
			}
			set
			{
				if ((this._EffortZone1Max != value))
				{
					this.OnEffortZone1MaxChanging(value);
					this.SendPropertyChanging();
					this._EffortZone1Max = value;
					this.SendPropertyChanged("EffortZone1Max");
					this.OnEffortZone1MaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffortZone2Min", DbType="Float NOT NULL")]
		public double EffortZone2Min
		{
			get
			{
				return this._EffortZone2Min;
			}
			set
			{
				if ((this._EffortZone2Min != value))
				{
					this.OnEffortZone2MinChanging(value);
					this.SendPropertyChanging();
					this._EffortZone2Min = value;
					this.SendPropertyChanged("EffortZone2Min");
					this.OnEffortZone2MinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffortZone2Max", DbType="Float NOT NULL")]
		public double EffortZone2Max
		{
			get
			{
				return this._EffortZone2Max;
			}
			set
			{
				if ((this._EffortZone2Max != value))
				{
					this.OnEffortZone2MaxChanging(value);
					this.SendPropertyChanging();
					this._EffortZone2Max = value;
					this.SendPropertyChanged("EffortZone2Max");
					this.OnEffortZone2MaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffortZone3Min", DbType="Float NOT NULL")]
		public double EffortZone3Min
		{
			get
			{
				return this._EffortZone3Min;
			}
			set
			{
				if ((this._EffortZone3Min != value))
				{
					this.OnEffortZone3MinChanging(value);
					this.SendPropertyChanging();
					this._EffortZone3Min = value;
					this.SendPropertyChanged("EffortZone3Min");
					this.OnEffortZone3MinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffortZone3Max", DbType="Float NOT NULL")]
		public double EffortZone3Max
		{
			get
			{
				return this._EffortZone3Max;
			}
			set
			{
				if ((this._EffortZone3Max != value))
				{
					this.OnEffortZone3MaxChanging(value);
					this.SendPropertyChanging();
					this._EffortZone3Max = value;
					this.SendPropertyChanged("EffortZone3Max");
					this.OnEffortZone3MaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffortZone4Min", DbType="Float NOT NULL")]
		public double EffortZone4Min
		{
			get
			{
				return this._EffortZone4Min;
			}
			set
			{
				if ((this._EffortZone4Min != value))
				{
					this.OnEffortZone4MinChanging(value);
					this.SendPropertyChanging();
					this._EffortZone4Min = value;
					this.SendPropertyChanged("EffortZone4Min");
					this.OnEffortZone4MinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffortZone4Max", DbType="Float NOT NULL")]
		public double EffortZone4Max
		{
			get
			{
				return this._EffortZone4Max;
			}
			set
			{
				if ((this._EffortZone4Max != value))
				{
					this.OnEffortZone4MaxChanging(value);
					this.SendPropertyChanging();
					this._EffortZone4Max = value;
					this.SendPropertyChanged("EffortZone4Max");
					this.OnEffortZone4MaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffortZone5Min", DbType="Float NOT NULL")]
		public double EffortZone5Min
		{
			get
			{
				return this._EffortZone5Min;
			}
			set
			{
				if ((this._EffortZone5Min != value))
				{
					this.OnEffortZone5MinChanging(value);
					this.SendPropertyChanging();
					this._EffortZone5Min = value;
					this.SendPropertyChanged("EffortZone5Min");
					this.OnEffortZone5MinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffortZone5Max", DbType="Float NOT NULL")]
		public double EffortZone5Max
		{
			get
			{
				return this._EffortZone5Max;
			}
			set
			{
				if ((this._EffortZone5Max != value))
				{
					this.OnEffortZone5MaxChanging(value);
					this.SendPropertyChanging();
					this._EffortZone5Max = value;
					this.SendPropertyChanged("EffortZone5Max");
					this.OnEffortZone5MaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffortZone6Min", DbType="Float NOT NULL")]
		public double EffortZone6Min
		{
			get
			{
				return this._EffortZone6Min;
			}
			set
			{
				if ((this._EffortZone6Min != value))
				{
					this.OnEffortZone6MinChanging(value);
					this.SendPropertyChanging();
					this._EffortZone6Min = value;
					this.SendPropertyChanged("EffortZone6Min");
					this.OnEffortZone6MinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffortZone6Max", DbType="Float NOT NULL")]
		public double EffortZone6Max
		{
			get
			{
				return this._EffortZone6Max;
			}
			set
			{
				if ((this._EffortZone6Max != value))
				{
					this.OnEffortZone6MaxChanging(value);
					this.SendPropertyChanging();
					this._EffortZone6Max = value;
					this.SendPropertyChanged("EffortZone6Max");
					this.OnEffortZone6MaxChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class PlayerFullNameProcResult
	{
		
		private int _PlayerID;
		
		private string _Fullname;
		
		public PlayerFullNameProcResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL")]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					this._PlayerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="VarChar(71) NOT NULL", CanBeNull=false)]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this._Fullname = value;
				}
			}
		}
	}
	
	public partial class PlayerLineupDetailsProcResult
	{
		
		private int _LineupID;
		
		private string _LineupDetails;
		
		public PlayerLineupDetailsProcResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineupID", DbType="Int NOT NULL")]
		public int LineupID
		{
			get
			{
				return this._LineupID;
			}
			set
			{
				if ((this._LineupID != value))
				{
					this._LineupID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineupDetails", DbType="VarChar(104) NOT NULL", CanBeNull=false)]
		public string LineupDetails
		{
			get
			{
				return this._LineupDetails;
			}
			set
			{
				if ((this._LineupDetails != value))
				{
					this._LineupDetails = value;
				}
			}
		}
	}
	
	public partial class GameSearchByDateProcResult
	{
		
		private int _GameID;
		
		private string _LineupDetails;
		
		public GameSearchByDateProcResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this._GameID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineupDetails", DbType="VarChar(99) NOT NULL", CanBeNull=false)]
		public string LineupDetails
		{
			get
			{
				return this._LineupDetails;
			}
			set
			{
				if ((this._LineupDetails != value))
				{
					this._LineupDetails = value;
				}
			}
		}
	}
	
	public partial class SelectOpponentsBarTrainingResult
	{
		
		private int _OpponentID;
		
		private string _OpponentName;
		
		public SelectOpponentsBarTrainingResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentID", DbType="Int NOT NULL")]
		public int OpponentID
		{
			get
			{
				return this._OpponentID;
			}
			set
			{
				if ((this._OpponentID != value))
				{
					this._OpponentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OpponentName
		{
			get
			{
				return this._OpponentName;
			}
			set
			{
				if ((this._OpponentName != value))
				{
					this._OpponentName = value;
				}
			}
		}
	}
	
	public partial class GameDetailsProcResult
	{
		
		private int _GameID;
		
		private string _GameDetails;
		
		public GameDetailsProcResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this._GameID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameDetails", DbType="VarChar(109) NOT NULL", CanBeNull=false)]
		public string GameDetails
		{
			get
			{
				return this._GameDetails;
			}
			set
			{
				if ((this._GameDetails != value))
				{
					this._GameDetails = value;
				}
			}
		}
	}
	
	public partial class GameSearchByOpponentProcResult
	{
		
		private int _GameID;
		
		private string _LineupDetails;
		
		public GameSearchByOpponentProcResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this._GameID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineupDetails", DbType="VarChar(99) NOT NULL", CanBeNull=false)]
		public string LineupDetails
		{
			get
			{
				return this._LineupDetails;
			}
			set
			{
				if ((this._LineupDetails != value))
				{
					this._LineupDetails = value;
				}
			}
		}
	}
	
	public partial class GameDetailsByOppProcResult
	{
		
		private int _GameID;
		
		private string _GameDetails;
		
		public GameDetailsByOppProcResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this._GameID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameDetails", DbType="VarChar(109) NOT NULL", CanBeNull=false)]
		public string GameDetails
		{
			get
			{
				return this._GameDetails;
			}
			set
			{
				if ((this._GameDetails != value))
				{
					this._GameDetails = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
