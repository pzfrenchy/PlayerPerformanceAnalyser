#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Analyser
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertTimeLine(TimeLine instance);
    partial void UpdateTimeLine(TimeLine instance);
    partial void DeleteTimeLine(TimeLine instance);
    partial void InsertGPSDevice(GPSDevice instance);
    partial void UpdateGPSDevice(GPSDevice instance);
    partial void DeleteGPSDevice(GPSDevice instance);
    partial void InsertLineup(Lineup instance);
    partial void UpdateLineup(Lineup instance);
    partial void DeleteLineup(Lineup instance);
    partial void InsertOpponent(Opponent instance);
    partial void UpdateOpponent(Opponent instance);
    partial void DeleteOpponent(Opponent instance);
    partial void InsertPitch(Pitch instance);
    partial void UpdatePitch(Pitch instance);
    partial void DeletePitch(Pitch instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertPlayerPerformance(PlayerPerformance instance);
    partial void UpdatePlayerPerformance(PlayerPerformance instance);
    partial void DeletePlayerPerformance(PlayerPerformance instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::Analyser.Properties.Settings.Default.DatabaseConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<TimeLine> TimeLines
		{
			get
			{
				return this.GetTable<TimeLine>();
			}
		}
		
		public System.Data.Linq.Table<GPSDevice> GPSDevices
		{
			get
			{
				return this.GetTable<GPSDevice>();
			}
		}
		
		public System.Data.Linq.Table<Lineup> Lineups
		{
			get
			{
				return this.GetTable<Lineup>();
			}
		}
		
		public System.Data.Linq.Table<Opponent> Opponents
		{
			get
			{
				return this.GetTable<Opponent>();
			}
		}
		
		public System.Data.Linq.Table<Pitch> Pitches
		{
			get
			{
				return this.GetTable<Pitch>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<PlayerPerformance> PlayerPerformances
		{
			get
			{
				return this.GetTable<PlayerPerformance>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameID;
		
		private System.Nullable<System.DateTime> _GameDate;
		
		private System.Nullable<int> _OpponentID;
		
		private System.Nullable<int> _PitchID;
		
		private EntitySet<Lineup> _Lineups;
		
		private EntityRef<Opponent> _Opponent;
		
		private EntityRef<Pitch> _Pitch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnGameDateChanging(System.Nullable<System.DateTime> value);
    partial void OnGameDateChanged();
    partial void OnOpponentIDChanging(System.Nullable<int> value);
    partial void OnOpponentIDChanged();
    partial void OnPitchIDChanging(System.Nullable<int> value);
    partial void OnPitchIDChanged();
    #endregion
		
		public Game()
		{
			this._Lineups = new EntitySet<Lineup>(new Action<Lineup>(this.attach_Lineups), new Action<Lineup>(this.detach_Lineups));
			this._Opponent = default(EntityRef<Opponent>);
			this._Pitch = default(EntityRef<Pitch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameDate", DbType="Date")]
		public System.Nullable<System.DateTime> GameDate
		{
			get
			{
				return this._GameDate;
			}
			set
			{
				if ((this._GameDate != value))
				{
					this.OnGameDateChanging(value);
					this.SendPropertyChanging();
					this._GameDate = value;
					this.SendPropertyChanged("GameDate");
					this.OnGameDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentID", DbType="Int")]
		public System.Nullable<int> OpponentID
		{
			get
			{
				return this._OpponentID;
			}
			set
			{
				if ((this._OpponentID != value))
				{
					if (this._Opponent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOpponentIDChanging(value);
					this.SendPropertyChanging();
					this._OpponentID = value;
					this.SendPropertyChanged("OpponentID");
					this.OnOpponentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PitchID", DbType="Int")]
		public System.Nullable<int> PitchID
		{
			get
			{
				return this._PitchID;
			}
			set
			{
				if ((this._PitchID != value))
				{
					if (this._Pitch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPitchIDChanging(value);
					this.SendPropertyChanging();
					this._PitchID = value;
					this.SendPropertyChanged("PitchID");
					this.OnPitchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Lineup", Storage="_Lineups", ThisKey="GameID", OtherKey="GameID")]
		public EntitySet<Lineup> Lineups
		{
			get
			{
				return this._Lineups;
			}
			set
			{
				this._Lineups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Opponent_Game", Storage="_Opponent", ThisKey="OpponentID", OtherKey="OpponentID", IsForeignKey=true)]
		public Opponent Opponent
		{
			get
			{
				return this._Opponent.Entity;
			}
			set
			{
				Opponent previousValue = this._Opponent.Entity;
				if (((previousValue != value) 
							|| (this._Opponent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Opponent.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Opponent.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._OpponentID = value.OpponentID;
					}
					else
					{
						this._OpponentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Opponent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pitch_Game", Storage="_Pitch", ThisKey="PitchID", OtherKey="PitchID", IsForeignKey=true)]
		public Pitch Pitch
		{
			get
			{
				return this._Pitch.Entity;
			}
			set
			{
				Pitch previousValue = this._Pitch.Entity;
				if (((previousValue != value) 
							|| (this._Pitch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pitch.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Pitch.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._PitchID = value.PitchID;
					}
					else
					{
						this._PitchID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pitch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lineups(Lineup entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Lineups(Lineup entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeLine")]
	public partial class TimeLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimeLineID;
		
		private System.Nullable<System.DateTime> _ReadingTime;
		
		private System.Nullable<double> _Longitude;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<int> _GPSDeviceID;
		
		private System.Nullable<int> _LineupID;
		
		private EntityRef<GPSDevice> _GPSDevice;
		
		private EntityRef<Lineup> _Lineup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeLineIDChanging(int value);
    partial void OnTimeLineIDChanged();
    partial void OnReadingTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnReadingTimeChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnGPSDeviceIDChanging(System.Nullable<int> value);
    partial void OnGPSDeviceIDChanged();
    partial void OnLineupIDChanging(System.Nullable<int> value);
    partial void OnLineupIDChanged();
    #endregion
		
		public TimeLine()
		{
			this._GPSDevice = default(EntityRef<GPSDevice>);
			this._Lineup = default(EntityRef<Lineup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeLineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TimeLineID
		{
			get
			{
				return this._TimeLineID;
			}
			set
			{
				if ((this._TimeLineID != value))
				{
					this.OnTimeLineIDChanging(value);
					this.SendPropertyChanging();
					this._TimeLineID = value;
					this.SendPropertyChanged("TimeLineID");
					this.OnTimeLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadingTime", DbType="DateTime2")]
		public System.Nullable<System.DateTime> ReadingTime
		{
			get
			{
				return this._ReadingTime;
			}
			set
			{
				if ((this._ReadingTime != value))
				{
					this.OnReadingTimeChanging(value);
					this.SendPropertyChanging();
					this._ReadingTime = value;
					this.SendPropertyChanged("ReadingTime");
					this.OnReadingTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float")]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPSDeviceID", DbType="Int")]
		public System.Nullable<int> GPSDeviceID
		{
			get
			{
				return this._GPSDeviceID;
			}
			set
			{
				if ((this._GPSDeviceID != value))
				{
					if (this._GPSDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGPSDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._GPSDeviceID = value;
					this.SendPropertyChanged("GPSDeviceID");
					this.OnGPSDeviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineupID", DbType="Int")]
		public System.Nullable<int> LineupID
		{
			get
			{
				return this._LineupID;
			}
			set
			{
				if ((this._LineupID != value))
				{
					if (this._Lineup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLineupIDChanging(value);
					this.SendPropertyChanging();
					this._LineupID = value;
					this.SendPropertyChanged("LineupID");
					this.OnLineupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GPSDevice_TimeLine", Storage="_GPSDevice", ThisKey="GPSDeviceID", OtherKey="GPSDeviceID", IsForeignKey=true)]
		public GPSDevice GPSDevice
		{
			get
			{
				return this._GPSDevice.Entity;
			}
			set
			{
				GPSDevice previousValue = this._GPSDevice.Entity;
				if (((previousValue != value) 
							|| (this._GPSDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GPSDevice.Entity = null;
						previousValue.TimeLines.Remove(this);
					}
					this._GPSDevice.Entity = value;
					if ((value != null))
					{
						value.TimeLines.Add(this);
						this._GPSDeviceID = value.GPSDeviceID;
					}
					else
					{
						this._GPSDeviceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GPSDevice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lineup_TimeLine", Storage="_Lineup", ThisKey="LineupID", OtherKey="LineupID", IsForeignKey=true)]
		public Lineup Lineup
		{
			get
			{
				return this._Lineup.Entity;
			}
			set
			{
				Lineup previousValue = this._Lineup.Entity;
				if (((previousValue != value) 
							|| (this._Lineup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lineup.Entity = null;
						previousValue.TimeLines.Remove(this);
					}
					this._Lineup.Entity = value;
					if ((value != null))
					{
						value.TimeLines.Add(this);
						this._LineupID = value.LineupID;
					}
					else
					{
						this._LineupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lineup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GPSDevice")]
	public partial class GPSDevice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GPSDeviceID;
		
		private string _GPSDeviceName;
		
		private EntitySet<TimeLine> _TimeLines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGPSDeviceIDChanging(int value);
    partial void OnGPSDeviceIDChanged();
    partial void OnGPSDeviceNameChanging(string value);
    partial void OnGPSDeviceNameChanged();
    #endregion
		
		public GPSDevice()
		{
			this._TimeLines = new EntitySet<TimeLine>(new Action<TimeLine>(this.attach_TimeLines), new Action<TimeLine>(this.detach_TimeLines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPSDeviceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GPSDeviceID
		{
			get
			{
				return this._GPSDeviceID;
			}
			set
			{
				if ((this._GPSDeviceID != value))
				{
					this.OnGPSDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._GPSDeviceID = value;
					this.SendPropertyChanged("GPSDeviceID");
					this.OnGPSDeviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPSDeviceName", DbType="VarChar(20)")]
		public string GPSDeviceName
		{
			get
			{
				return this._GPSDeviceName;
			}
			set
			{
				if ((this._GPSDeviceName != value))
				{
					this.OnGPSDeviceNameChanging(value);
					this.SendPropertyChanging();
					this._GPSDeviceName = value;
					this.SendPropertyChanged("GPSDeviceName");
					this.OnGPSDeviceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GPSDevice_TimeLine", Storage="_TimeLines", ThisKey="GPSDeviceID", OtherKey="GPSDeviceID")]
		public EntitySet<TimeLine> TimeLines
		{
			get
			{
				return this._TimeLines;
			}
			set
			{
				this._TimeLines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TimeLines(TimeLine entity)
		{
			this.SendPropertyChanging();
			entity.GPSDevice = this;
		}
		
		private void detach_TimeLines(TimeLine entity)
		{
			this.SendPropertyChanging();
			entity.GPSDevice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lineup")]
	public partial class Lineup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LineupID;
		
		private System.Nullable<int> _PositionID;
		
		private System.Nullable<int> _PlayerID;
		
		private System.Nullable<int> _GameID;
		
		private System.Nullable<bool> _Training;
		
		private EntitySet<TimeLine> _TimeLines;
		
		private EntitySet<PlayerPerformance> _PlayerPerformances;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Position> _Position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLineupIDChanging(int value);
    partial void OnLineupIDChanged();
    partial void OnPositionIDChanging(System.Nullable<int> value);
    partial void OnPositionIDChanged();
    partial void OnPlayerIDChanging(System.Nullable<int> value);
    partial void OnPlayerIDChanged();
    partial void OnGameIDChanging(System.Nullable<int> value);
    partial void OnGameIDChanged();
    partial void OnTrainingChanging(System.Nullable<bool> value);
    partial void OnTrainingChanged();
    #endregion
		
		public Lineup()
		{
			this._TimeLines = new EntitySet<TimeLine>(new Action<TimeLine>(this.attach_TimeLines), new Action<TimeLine>(this.detach_TimeLines));
			this._PlayerPerformances = new EntitySet<PlayerPerformance>(new Action<PlayerPerformance>(this.attach_PlayerPerformances), new Action<PlayerPerformance>(this.detach_PlayerPerformances));
			this._Game = default(EntityRef<Game>);
			this._Player = default(EntityRef<Player>);
			this._Position = default(EntityRef<Position>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LineupID
		{
			get
			{
				return this._LineupID;
			}
			set
			{
				if ((this._LineupID != value))
				{
					this.OnLineupIDChanging(value);
					this.SendPropertyChanging();
					this._LineupID = value;
					this.SendPropertyChanged("LineupID");
					this.OnLineupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", DbType="Int")]
		public System.Nullable<int> PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int")]
		public System.Nullable<int> PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int")]
		public System.Nullable<int> GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Training", DbType="Bit")]
		public System.Nullable<bool> Training
		{
			get
			{
				return this._Training;
			}
			set
			{
				if ((this._Training != value))
				{
					this.OnTrainingChanging(value);
					this.SendPropertyChanging();
					this._Training = value;
					this.SendPropertyChanged("Training");
					this.OnTrainingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lineup_TimeLine", Storage="_TimeLines", ThisKey="LineupID", OtherKey="LineupID")]
		public EntitySet<TimeLine> TimeLines
		{
			get
			{
				return this._TimeLines;
			}
			set
			{
				this._TimeLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lineup_PlayerPerformance", Storage="_PlayerPerformances", ThisKey="LineupID", OtherKey="LineupID")]
		public EntitySet<PlayerPerformance> PlayerPerformances
		{
			get
			{
				return this._PlayerPerformances;
			}
			set
			{
				this._PlayerPerformances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Lineup", Storage="_Game", ThisKey="GameID", OtherKey="GameID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Lineups.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Lineups.Add(this);
						this._GameID = value.GameID;
					}
					else
					{
						this._GameID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Lineup", Storage="_Player", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Lineups.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Lineups.Add(this);
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Lineup", Storage="_Position", ThisKey="PositionID", OtherKey="PositionID", IsForeignKey=true)]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.Lineups.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.Lineups.Add(this);
						this._PositionID = value.PositionID;
					}
					else
					{
						this._PositionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TimeLines(TimeLine entity)
		{
			this.SendPropertyChanging();
			entity.Lineup = this;
		}
		
		private void detach_TimeLines(TimeLine entity)
		{
			this.SendPropertyChanging();
			entity.Lineup = null;
		}
		
		private void attach_PlayerPerformances(PlayerPerformance entity)
		{
			this.SendPropertyChanging();
			entity.Lineup = this;
		}
		
		private void detach_PlayerPerformances(PlayerPerformance entity)
		{
			this.SendPropertyChanging();
			entity.Lineup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Opponent")]
	public partial class Opponent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OpponentID;
		
		private string _OpponentName;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOpponentIDChanging(int value);
    partial void OnOpponentIDChanged();
    partial void OnOpponentNameChanging(string value);
    partial void OnOpponentNameChanged();
    #endregion
		
		public Opponent()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OpponentID
		{
			get
			{
				return this._OpponentID;
			}
			set
			{
				if ((this._OpponentID != value))
				{
					this.OnOpponentIDChanging(value);
					this.SendPropertyChanging();
					this._OpponentID = value;
					this.SendPropertyChanged("OpponentID");
					this.OnOpponentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentName", DbType="VarChar(50)")]
		public string OpponentName
		{
			get
			{
				return this._OpponentName;
			}
			set
			{
				if ((this._OpponentName != value))
				{
					this.OnOpponentNameChanging(value);
					this.SendPropertyChanging();
					this._OpponentName = value;
					this.SendPropertyChanged("OpponentName");
					this.OnOpponentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Opponent_Game", Storage="_Games", ThisKey="OpponentID", OtherKey="OpponentID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Opponent = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Opponent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pitch")]
	public partial class Pitch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PitchID;
		
		private string _PitchName;
		
		private System.Nullable<double> _NPointLat;
		
		private System.Nullable<double> _NPointLon;
		
		private System.Nullable<double> _EPointLat;
		
		private System.Nullable<double> _EPointLon;
		
		private System.Nullable<double> _SPoingLat;
		
		private System.Nullable<double> _SPointLon;
		
		private System.Nullable<double> _WPointLat;
		
		private System.Nullable<double> _WPointLon;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPitchIDChanging(int value);
    partial void OnPitchIDChanged();
    partial void OnPitchNameChanging(string value);
    partial void OnPitchNameChanged();
    partial void OnNPointLatChanging(System.Nullable<double> value);
    partial void OnNPointLatChanged();
    partial void OnNPointLonChanging(System.Nullable<double> value);
    partial void OnNPointLonChanged();
    partial void OnEPointLatChanging(System.Nullable<double> value);
    partial void OnEPointLatChanged();
    partial void OnEPointLonChanging(System.Nullable<double> value);
    partial void OnEPointLonChanged();
    partial void OnSPoingLatChanging(System.Nullable<double> value);
    partial void OnSPoingLatChanged();
    partial void OnSPointLonChanging(System.Nullable<double> value);
    partial void OnSPointLonChanged();
    partial void OnWPointLatChanging(System.Nullable<double> value);
    partial void OnWPointLatChanged();
    partial void OnWPointLonChanging(System.Nullable<double> value);
    partial void OnWPointLonChanged();
    #endregion
		
		public Pitch()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PitchID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PitchID
		{
			get
			{
				return this._PitchID;
			}
			set
			{
				if ((this._PitchID != value))
				{
					this.OnPitchIDChanging(value);
					this.SendPropertyChanging();
					this._PitchID = value;
					this.SendPropertyChanged("PitchID");
					this.OnPitchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PitchName", DbType="VarChar(50)")]
		public string PitchName
		{
			get
			{
				return this._PitchName;
			}
			set
			{
				if ((this._PitchName != value))
				{
					this.OnPitchNameChanging(value);
					this.SendPropertyChanging();
					this._PitchName = value;
					this.SendPropertyChanged("PitchName");
					this.OnPitchNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NPointLat", DbType="Float")]
		public System.Nullable<double> NPointLat
		{
			get
			{
				return this._NPointLat;
			}
			set
			{
				if ((this._NPointLat != value))
				{
					this.OnNPointLatChanging(value);
					this.SendPropertyChanging();
					this._NPointLat = value;
					this.SendPropertyChanged("NPointLat");
					this.OnNPointLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NPointLon", DbType="Float")]
		public System.Nullable<double> NPointLon
		{
			get
			{
				return this._NPointLon;
			}
			set
			{
				if ((this._NPointLon != value))
				{
					this.OnNPointLonChanging(value);
					this.SendPropertyChanging();
					this._NPointLon = value;
					this.SendPropertyChanged("NPointLon");
					this.OnNPointLonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPointLat", DbType="Float")]
		public System.Nullable<double> EPointLat
		{
			get
			{
				return this._EPointLat;
			}
			set
			{
				if ((this._EPointLat != value))
				{
					this.OnEPointLatChanging(value);
					this.SendPropertyChanging();
					this._EPointLat = value;
					this.SendPropertyChanged("EPointLat");
					this.OnEPointLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPointLon", DbType="Float")]
		public System.Nullable<double> EPointLon
		{
			get
			{
				return this._EPointLon;
			}
			set
			{
				if ((this._EPointLon != value))
				{
					this.OnEPointLonChanging(value);
					this.SendPropertyChanging();
					this._EPointLon = value;
					this.SendPropertyChanged("EPointLon");
					this.OnEPointLonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SPoingLat", DbType="Float")]
		public System.Nullable<double> SPoingLat
		{
			get
			{
				return this._SPoingLat;
			}
			set
			{
				if ((this._SPoingLat != value))
				{
					this.OnSPoingLatChanging(value);
					this.SendPropertyChanging();
					this._SPoingLat = value;
					this.SendPropertyChanged("SPoingLat");
					this.OnSPoingLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SPointLon", DbType="Float")]
		public System.Nullable<double> SPointLon
		{
			get
			{
				return this._SPointLon;
			}
			set
			{
				if ((this._SPointLon != value))
				{
					this.OnSPointLonChanging(value);
					this.SendPropertyChanging();
					this._SPointLon = value;
					this.SendPropertyChanged("SPointLon");
					this.OnSPointLonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WPointLat", DbType="Float")]
		public System.Nullable<double> WPointLat
		{
			get
			{
				return this._WPointLat;
			}
			set
			{
				if ((this._WPointLat != value))
				{
					this.OnWPointLatChanging(value);
					this.SendPropertyChanging();
					this._WPointLat = value;
					this.SendPropertyChanged("WPointLat");
					this.OnWPointLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WPointLon", DbType="Float")]
		public System.Nullable<double> WPointLon
		{
			get
			{
				return this._WPointLon;
			}
			set
			{
				if ((this._WPointLon != value))
				{
					this.OnWPointLonChanging(value);
					this.SendPropertyChanging();
					this._WPointLon = value;
					this.SendPropertyChanged("WPointLon");
					this.OnWPointLonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pitch_Game", Storage="_Games", ThisKey="PitchID", OtherKey="PitchID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Pitch = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Pitch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private string _Forename;
		
		private string _Surname;
		
		private System.DateTime _Dob;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Lineup> _Lineups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnForenameChanging(string value);
    partial void OnForenameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnDobChanging(System.DateTime value);
    partial void OnDobChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Player()
		{
			this._Lineups = new EntitySet<Lineup>(new Action<Lineup>(this.attach_Lineups), new Action<Lineup>(this.detach_Lineups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Forename", DbType="VarChar(30)")]
		public string Forename
		{
			get
			{
				return this._Forename;
			}
			set
			{
				if ((this._Forename != value))
				{
					this.OnForenameChanging(value);
					this.SendPropertyChanging();
					this._Forename = value;
					this.SendPropertyChanged("Forename");
					this.OnForenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(40)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dob", DbType="Date NOT NULL")]
		public System.DateTime Dob
		{
			get
			{
				return this._Dob;
			}
			set
			{
				if ((this._Dob != value))
				{
					this.OnDobChanging(value);
					this.SendPropertyChanging();
					this._Dob = value;
					this.SendPropertyChanged("Dob");
					this.OnDobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Lineup", Storage="_Lineups", ThisKey="PlayerID", OtherKey="PlayerID")]
		public EntitySet<Lineup> Lineups
		{
			get
			{
				return this._Lineups;
			}
			set
			{
				this._Lineups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lineups(Lineup entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Lineups(Lineup entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerPerformance")]
	public partial class PlayerPerformance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerPerformanceID;
		
		private System.Nullable<int> _Shots;
		
		private System.Nullable<int> _Goals;
		
		private System.Nullable<int> _Assists;
		
		private System.Nullable<int> _Passes;
		
		private System.Nullable<int> _Interceptions;
		
		private System.Nullable<int> _Tackles;
		
		private System.Nullable<int> _Crosses;
		
		private System.Nullable<int> _Corners;
		
		private System.Nullable<int> _Saves;
		
		private System.Nullable<int> _LineupID;
		
		private EntityRef<Lineup> _Lineup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerPerformanceIDChanging(int value);
    partial void OnPlayerPerformanceIDChanged();
    partial void OnShotsChanging(System.Nullable<int> value);
    partial void OnShotsChanged();
    partial void OnGoalsChanging(System.Nullable<int> value);
    partial void OnGoalsChanged();
    partial void OnAssistsChanging(System.Nullable<int> value);
    partial void OnAssistsChanged();
    partial void OnPassesChanging(System.Nullable<int> value);
    partial void OnPassesChanged();
    partial void OnInterceptionsChanging(System.Nullable<int> value);
    partial void OnInterceptionsChanged();
    partial void OnTacklesChanging(System.Nullable<int> value);
    partial void OnTacklesChanged();
    partial void OnCrossesChanging(System.Nullable<int> value);
    partial void OnCrossesChanged();
    partial void OnCornersChanging(System.Nullable<int> value);
    partial void OnCornersChanged();
    partial void OnSavesChanging(System.Nullable<int> value);
    partial void OnSavesChanged();
    partial void OnLineupIDChanging(System.Nullable<int> value);
    partial void OnLineupIDChanged();
    #endregion
		
		public PlayerPerformance()
		{
			this._Lineup = default(EntityRef<Lineup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPerformanceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlayerPerformanceID
		{
			get
			{
				return this._PlayerPerformanceID;
			}
			set
			{
				if ((this._PlayerPerformanceID != value))
				{
					this.OnPlayerPerformanceIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerPerformanceID = value;
					this.SendPropertyChanged("PlayerPerformanceID");
					this.OnPlayerPerformanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shots", DbType="Int")]
		public System.Nullable<int> Shots
		{
			get
			{
				return this._Shots;
			}
			set
			{
				if ((this._Shots != value))
				{
					this.OnShotsChanging(value);
					this.SendPropertyChanging();
					this._Shots = value;
					this.SendPropertyChanged("Shots");
					this.OnShotsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goals", DbType="Int")]
		public System.Nullable<int> Goals
		{
			get
			{
				return this._Goals;
			}
			set
			{
				if ((this._Goals != value))
				{
					this.OnGoalsChanging(value);
					this.SendPropertyChanging();
					this._Goals = value;
					this.SendPropertyChanged("Goals");
					this.OnGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assists", DbType="Int")]
		public System.Nullable<int> Assists
		{
			get
			{
				return this._Assists;
			}
			set
			{
				if ((this._Assists != value))
				{
					this.OnAssistsChanging(value);
					this.SendPropertyChanging();
					this._Assists = value;
					this.SendPropertyChanged("Assists");
					this.OnAssistsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passes", DbType="Int")]
		public System.Nullable<int> Passes
		{
			get
			{
				return this._Passes;
			}
			set
			{
				if ((this._Passes != value))
				{
					this.OnPassesChanging(value);
					this.SendPropertyChanging();
					this._Passes = value;
					this.SendPropertyChanged("Passes");
					this.OnPassesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interceptions", DbType="Int")]
		public System.Nullable<int> Interceptions
		{
			get
			{
				return this._Interceptions;
			}
			set
			{
				if ((this._Interceptions != value))
				{
					this.OnInterceptionsChanging(value);
					this.SendPropertyChanging();
					this._Interceptions = value;
					this.SendPropertyChanged("Interceptions");
					this.OnInterceptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tackles", DbType="Int")]
		public System.Nullable<int> Tackles
		{
			get
			{
				return this._Tackles;
			}
			set
			{
				if ((this._Tackles != value))
				{
					this.OnTacklesChanging(value);
					this.SendPropertyChanging();
					this._Tackles = value;
					this.SendPropertyChanged("Tackles");
					this.OnTacklesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crosses", DbType="Int")]
		public System.Nullable<int> Crosses
		{
			get
			{
				return this._Crosses;
			}
			set
			{
				if ((this._Crosses != value))
				{
					this.OnCrossesChanging(value);
					this.SendPropertyChanging();
					this._Crosses = value;
					this.SendPropertyChanged("Crosses");
					this.OnCrossesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Corners", DbType="Int")]
		public System.Nullable<int> Corners
		{
			get
			{
				return this._Corners;
			}
			set
			{
				if ((this._Corners != value))
				{
					this.OnCornersChanging(value);
					this.SendPropertyChanging();
					this._Corners = value;
					this.SendPropertyChanged("Corners");
					this.OnCornersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Saves", DbType="Int")]
		public System.Nullable<int> Saves
		{
			get
			{
				return this._Saves;
			}
			set
			{
				if ((this._Saves != value))
				{
					this.OnSavesChanging(value);
					this.SendPropertyChanging();
					this._Saves = value;
					this.SendPropertyChanged("Saves");
					this.OnSavesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineupID", DbType="Int")]
		public System.Nullable<int> LineupID
		{
			get
			{
				return this._LineupID;
			}
			set
			{
				if ((this._LineupID != value))
				{
					if (this._Lineup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLineupIDChanging(value);
					this.SendPropertyChanging();
					this._LineupID = value;
					this.SendPropertyChanged("LineupID");
					this.OnLineupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lineup_PlayerPerformance", Storage="_Lineup", ThisKey="LineupID", OtherKey="LineupID", IsForeignKey=true)]
		public Lineup Lineup
		{
			get
			{
				return this._Lineup.Entity;
			}
			set
			{
				Lineup previousValue = this._Lineup.Entity;
				if (((previousValue != value) 
							|| (this._Lineup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lineup.Entity = null;
						previousValue.PlayerPerformances.Remove(this);
					}
					this._Lineup.Entity = value;
					if ((value != null))
					{
						value.PlayerPerformances.Add(this);
						this._LineupID = value.LineupID;
					}
					else
					{
						this._LineupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lineup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PositionID;
		
		private string _Position1;
		
		private EntitySet<Lineup> _Lineups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPositionIDChanging(int value);
    partial void OnPositionIDChanged();
    partial void OnPosition1Changing(string value);
    partial void OnPosition1Changed();
    #endregion
		
		public Position()
		{
			this._Lineups = new EntitySet<Lineup>(new Action<Lineup>(this.attach_Lineups), new Action<Lineup>(this.detach_Lineups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Position", Storage="_Position1", DbType="VarChar(30)")]
		public string Position1
		{
			get
			{
				return this._Position1;
			}
			set
			{
				if ((this._Position1 != value))
				{
					this.OnPosition1Changing(value);
					this.SendPropertyChanging();
					this._Position1 = value;
					this.SendPropertyChanged("Position1");
					this.OnPosition1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Lineup", Storage="_Lineups", ThisKey="PositionID", OtherKey="PositionID")]
		public EntitySet<Lineup> Lineups
		{
			get
			{
				return this._Lineups;
			}
			set
			{
				this._Lineups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lineups(Lineup entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_Lineups(Lineup entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
}
#pragma warning restore 1591
